rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated admin
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to validate territory data structure
    function isValidTerritory(data) {
      return data.keys().hasAll(['name', 'timeline', 'createdAt', 'updatedAt', 'createdBy']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.timeline is list &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             data.createdBy is string;
    }
    
    // Helper function to validate timeline entry
    function isValidTimelineEntry(entry) {
      return entry.keys().hasAll(['start', 'end', 'sect', 'description']) &&
             entry.start is number &&
             entry.end is number &&
             entry.start <= entry.end &&
             entry.sect is string &&
             entry.sect in ['Sabbat', 'Camarilla', 'Anarchs', 'Independent Alliance', 'Vodouists', 'Southern Lords', 'Contested', 'Unclaimed', 'Unknown'] &&
             entry.description is string;
    }
    
    // Territories collection - public read, admin write with validation
    match /territories/{territoryId} {
      allow read: if true;
      allow create: if isAdmin() && 
                       isValidTerritory(request.resource.data) &&
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAdmin() && 
                       isValidTerritory(request.resource.data) &&
                       request.resource.data.createdBy == resource.data.createdBy && // Preserve original creator
                       request.resource.data.lastModifiedBy == request.auth.uid;
      allow delete: if isAdmin();
    }
    
    // Metadata collection - public read, admin write
    match /metadata/{document} {
      allow read: if true;
      allow write: if isAdmin() && 
                      request.resource.data.keys().hasAll(['lastUpdated']) &&
                      request.resource.data.lastUpdated is timestamp;
    }
    
    // Users collection - admin-only access with validation, but allow self-creation
    match /users/{userId} {
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      allow create: if (isAuthenticated() && request.auth.uid == userId) || isAdmin();
      allow update: if isAdmin() || 
                       (isAuthenticated() && 
                        request.auth.uid == userId && 
                        resource.data.diff(request.resource.data).affectedKeys().hasOnly(['lastLogin', 'preferences', 'updatedAt']));
      allow delete: if isAdmin() && userId != request.auth.uid; // Prevent self-deletion
    }
    
    // Audit logs collection - admin read-only, system write
    match /audit/{auditId} {
      allow read: if isAdmin();
      allow write: if false; // Only server-side functions can write audit logs
    }
  }
}